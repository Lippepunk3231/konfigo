import{_ as i,c as t,o,ae as n}from"./chunks/framework.Bw7rlmih.js";const f=JSON.parse(`{"title":"","description":"","frontmatter":{"layout":"home","hero":{"name":"Konfigo","text":"Documentation","tagline":"Simplify and Supercharge Your Configuration Management Workflow","actions":[{"theme":"brand","text":"Quick Start","link":"/quick-start"},{"theme":"alt","text":"View User Guide","link":"/guide/"},{"theme":"alt","text":"Explore Schema","link":"/schema/"}]},"features":[{"title":"Multi-Format Support","details":"Seamlessly read, merge, and output JSON, YAML, TOML, and .env configuration files."},{"title":"Powerful Schema Processing","details":"Define variables, generate data, transform structures, and validate configurations with a flexible schema."},{"title":"Batch Output Generation","details":"Generate multiple tailored configuration files from a single schema using the 'konfigo_forEach' directive."},{"title":"Environment Integration","details":"Override configurations and supply variables directly through environment variables for dynamic setups."},{"title":"Flexible Merging","details":"Intelligently merge multiple configuration sources, respecting order and immutability rules."},{"title":"Comprehensive CLI","details":"Rich set of command-line options for fine-grained control over input, output, and processing."}]},"headers":[],"relativePath":"index.md","filePath":"index.md"}`),a={name:"index.md"};function r(s,e,l,c,d,u){return o(),t("div",null,e[0]||(e[0]=[n('<br><p>Konfigo is a powerful and versatile command-line tool designed to simplify your configuration management workflow. It excels at reading various configuration file formats, merging them intelligently, and then processing the combined data against a user-defined schema. This schema can perform a wide array of operations, including:</p><ul><li><strong>Variable Substitution</strong>: Inject dynamic values from environment variables, dedicated variable files, or even other parts of your configuration.</li><li><strong>Data Generation</strong>: Create new configuration values based on existing data (e.g., concatenating strings).</li><li><strong>Data Transformation</strong>: Modify keys and values (e.g., renaming keys, changing string case, adding prefixes, setting static values).</li><li><strong>Data Validation</strong>: Ensure your configuration adheres to specific rules and constraints (e.g., required fields, data types, numerical ranges, string patterns).</li><li><strong>Batch Processing</strong>: Generate multiple output files from a single schema and a set of iterating variables, perfect for managing configurations across different environments or services.</li></ul><p>Whether you&#39;re dealing with simple JSON files or complex, multi-layered YAML configurations with environment-specific overrides, Konfigo provides the tools to manage them efficiently and reliably.</p><h2 id="key-features" tabindex="-1">Key Features <a class="header-anchor" href="#key-features" aria-label="Permalink to &quot;Key Features&quot;">​</a></h2><ul><li><strong>Multi-Format Support</strong>: Reads JSON, YAML, TOML, and .env files.</li><li><strong>Flexible Merging</strong>: Intelligently merges multiple configuration sources.</li><li><strong>Powerful Schema Processing</strong>: <ul><li>Define variables with clear precedence (environment, vars file, schema defaults).</li><li>Generate new data using <code>concat</code> and other potential generators.</li><li>Transform data structures with operations like <code>renameKey</code>, <code>changeCase</code>, <code>addKeyPrefix</code>, and <code>setValue</code>.</li><li>Validate configurations against a rich set of rules (<code>required</code>, <code>type</code>, <code>min</code>, <code>max</code>, <code>minLength</code>, <code>enum</code>, <code>regex</code>).</li></ul></li><li><strong>Environment Variable Integration</strong>: <ul><li>Override configuration values directly using <code>KONFIGO_KEY_path.to.key=value</code>.</li><li>Supply variables for substitution using <code>KONFIGO_VAR_VARNAME=value</code>.</li></ul></li><li><strong>Batch Output Generation</strong>: Use the <code>konfigo_forEach</code> directive in your variables file to produce multiple tailored configuration outputs from a single run.</li><li><strong>Input/Output Control</strong>: <ul><li>Read from files, directories (recursively), or stdin.</li><li>Output to stdout or specified files.</li><li>Control input and output formats (JSON, YAML, TOML, ENV).</li></ul></li><li><strong>Schema Validation</strong>: Validate input configurations against an <code>inputSchema</code> and filter outputs using an <code>outputSchema</code>.</li><li><strong>Immutability</strong>: Protect specific configuration paths from being overridden during merges using the <code>immutable</code> schema directive.</li><li><strong>Customizable Behavior</strong>: Options for case-sensitivity in key matching, verbose logging, and more.</li></ul><h2 id="getting-started" tabindex="-1">Getting Started <a class="header-anchor" href="#getting-started" aria-label="Permalink to &quot;Getting Started&quot;">​</a></h2><ol><li><strong>Installation</strong>: (Add installation instructions here if available, e.g., <code>go install</code> or binary download links)</li><li><strong>Basic Usage</strong>: <code>konfigo -s source1.yml -s source2.json -of output.yml</code></li><li><strong>Using a Schema</strong>: <code>konfigo -s config.json -S schema.yml -V staging-vars.yml -of staging_config.json</code></li></ol><p>Dive into the <a href="./guide/">Guide</a> to learn more about the CLI and its features, or explore the <a href="./schema/">Schema</a> documentation to unlock the full power of Konfigo&#39;s processing capabilities.</p>',9)]))}const m=i(a,[["render",r]]);export{f as __pageData,m as default};
