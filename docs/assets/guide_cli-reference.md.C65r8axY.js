import{_ as i,c as o,o as s,ae as t}from"./chunks/framework.Bw7rlmih.js";const p=JSON.parse('{"title":"CLI Reference","description":"","frontmatter":{},"headers":[],"relativePath":"guide/cli-reference.md","filePath":"guide/cli-reference.md"}'),a={name:"guide/cli-reference.md"};function n(l,e,r,c,d,g){return s(),o("div",null,e[0]||(e[0]=[t(`<h1 id="cli-reference" tabindex="-1">CLI Reference <a class="header-anchor" href="#cli-reference" aria-label="Permalink to &quot;CLI Reference&quot;">​</a></h1><p>Konfigo is a versatile command-line tool for merging, processing, and transforming configuration files. This page details all available command-line flags and options.</p><h2 id="synopsis" tabindex="-1">Synopsis <a class="header-anchor" href="#synopsis" aria-label="Permalink to &quot;Synopsis&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [flags] -s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sources...</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [flags] -s - -s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">format_flag</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Reading from stdin</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config.yml</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -sy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -S</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> schema.yml</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Example with stdin and schema</span></span></code></pre></div><h2 id="flags" tabindex="-1">Flags <a class="header-anchor" href="#flags" aria-label="Permalink to &quot;Flags&quot;">​</a></h2><p>Flags are used to control Konfigo&#39;s behavior, from specifying input sources and output formats to enabling schema processing and managing logging.</p><h3 id="input-sources" tabindex="-1">Input &amp; Sources <a class="header-anchor" href="#input-sources" aria-label="Permalink to &quot;Input &amp; Sources&quot;">​</a></h3><p>These flags control how Konfigo discovers and parses your input configuration files.</p><ul><li><p><code>-s &lt;paths&gt;</code>:</p><ul><li><strong>Description</strong>: A comma-separated list of source files or directories. Konfigo will read and merge these sources in the order they are provided.</li><li>Use <code>-</code> to specify reading from standard input (stdin). When using stdin, you <strong>must</strong> also specify the input format using one of the <code>-s&lt;format&gt;</code> flags (e.g., <code>-sy</code> for YAML).</li><li><strong>Example</strong>: <code>konfigo -s base.json,env/dev.yml,secrets.env</code></li><li><strong>Example (stdin)</strong>: <code>cat my_config.json | konfigo -s - -sj</code></li></ul></li><li><p><code>-r</code>:</p><ul><li><strong>Description</strong>: Recursively search for configuration files in subdirectories of any directories specified in <code>-s</code>.</li><li>Konfigo identifies files by common configuration extensions (e.g., <code>.json</code>, <code>.yaml</code>, <code>.yml</code>, <code>.toml</code>, <code>.env</code>).</li><li><strong>Example</strong>: <code>konfigo -s ./configs -r</code></li></ul></li><li><p><code>-sj</code>:</p><ul><li><strong>Description</strong>: Force input to be parsed as JSON.</li><li>This is <strong>required</strong> if reading JSON content from stdin (<code>-s -</code>).</li><li><strong>Example</strong>: <code>echo &#39;{&quot;key&quot;: &quot;value&quot;}&#39; | konfigo -s - -sj</code></li></ul></li><li><p><code>-sy</code>:</p><ul><li><strong>Description</strong>: Force input to be parsed as YAML.</li><li>This is <strong>required</strong> if reading YAML content from stdin (<code>-s -</code>).</li><li><strong>Example</strong>: <code>echo &#39;key: value&#39; | konfigo -s - -sy</code></li></ul></li><li><p><code>-st</code>:</p><ul><li><strong>Description</strong>: Force input to be parsed as TOML.</li><li>This is <strong>required</strong> if reading TOML content from stdin (<code>-s -</code>).</li><li><strong>Example</strong>: <code>echo &#39;key = &quot;value&quot;&#39; | konfigo -s - -st</code></li></ul></li><li><p><code>-se</code>:</p><ul><li><strong>Description</strong>: Force input to be parsed as an ENV file.</li><li>This is <strong>required</strong> if reading ENV content from stdin (<code>-s -</code>).</li><li><strong>Example</strong>: <code>echo &#39;KEY=value&#39; | konfigo -s - -se</code></li></ul></li></ul><h3 id="schema-variables" tabindex="-1">Schema &amp; Variables <a class="header-anchor" href="#schema-variables" aria-label="Permalink to &quot;Schema &amp; Variables&quot;">​</a></h3><p>These flags enable Konfigo&#39;s powerful schema-driven processing and variable substitution features.</p><ul><li><p><code>-S, --schema &lt;path&gt;</code>:</p><ul><li><strong>Description</strong>: Path to a schema file (must be YAML, JSON, or TOML). This schema defines how the merged configuration should be processed, including variable resolution, data generation, transformations, and validation.</li><li>Refer to the <a href="./../schema/">Schema Documentation</a> for details on schema structure and capabilities.</li><li><strong>Example</strong>: <code>konfigo -s config.yml -S schema.yml</code></li></ul></li><li><p><code>-V, --vars-file &lt;path&gt;</code>:</p><ul><li><strong>Description</strong>: Path to a file (YAML, JSON, or TOML) providing high-priority variables for substitution within your schema and configuration.</li><li>Variables from this file override those defined in the schema&#39;s <code>vars</code> block but are themselves overridden by <code>KONFIGO_VAR_...</code> environment variables.</li><li>This file can also contain the <code>konfigo_forEach</code> directive for batch processing.</li><li><strong>Example</strong>: <code>konfigo -s config.yml -S schema.yml -V prod-vars.yml</code></li><li>See <a href="#variable-precedence">Variable Precedence</a> and <a href="./../schema/variables.html#batch-processing-with-konfigo_foreach">Batch Processing with <code>konfigo_forEach</code></a> for more details.</li></ul></li></ul><h4 id="variable-precedence" tabindex="-1">Variable Precedence <a class="header-anchor" href="#variable-precedence" aria-label="Permalink to &quot;Variable Precedence&quot;">​</a></h4><p>Konfigo resolves variables used in <code>\${VAR_NAME}</code> substitutions with the following priority (1 is highest):</p><ol><li><strong>Environment Variables</strong>: Set as <code>KONFIGO_VAR_VARNAME=value</code>. (See <a href="./environment-variables.html">Environment Variables</a>)</li><li><strong>Variables File</strong>: Variables defined in the file specified by <code>-V</code> or <code>--vars-file</code>. <ul><li>In batch mode (<code>konfigo_forEach</code>), iteration-specific variables take precedence over global variables within this file.</li></ul></li><li><strong>Schema <code>vars</code> Block</strong>: Variables defined within the <code>vars:</code> section of the schema file specified by <code>-S</code>.</li></ol><h3 id="output-formatting" tabindex="-1">Output &amp; Formatting <a class="header-anchor" href="#output-formatting" aria-label="Permalink to &quot;Output &amp; Formatting&quot;">​</a></h3><p>These flags control the format and destination of Konfigo&#39;s output.</p><ul><li><p><code>-of &lt;path&gt;</code>:</p><ul><li><strong>Description</strong>: Write the final processed configuration to the specified file path.</li><li>If the filename has an extension (e.g., <code>.json</code>, <code>.yaml</code>, <code>.toml</code>, <code>.env</code>), Konfigo will use that extension to determine the output format.</li><li>If used in conjunction with specific format flags (<code>-oj</code>, <code>-oy</code>, etc.), this path acts as a base name, and the format flag&#39;s extension will be appended. For example, <code>konfigo -s c.json -of out/config -oy</code> would write to <code>out/config.yaml</code>.</li><li>If this flag is not provided, output is sent to standard output (stdout), defaulting to YAML format unless overridden by an <code>-o&lt;format&gt;</code> flag.</li><li><strong>Example (extension determines format)</strong>: <code>konfigo -s c.json -of config.yaml</code></li><li><strong>Example (used as base name)</strong>: <code>konfigo -s c.json -of config -oj -oy</code> (writes <code>config.json</code> and <code>config.yaml</code>)</li></ul></li><li><p><code>-oj</code>:</p><ul><li><strong>Description</strong>: Output the final configuration in JSON format.</li><li><strong>Example</strong>: <code>konfigo -s c.yml -oj</code> (outputs JSON to stdout)</li></ul></li><li><p><code>-oy</code>:</p><ul><li><strong>Description</strong>: Output the final configuration in YAML format. This is the default output format if no other output flags are specified.</li><li><strong>Example</strong>: <code>konfigo -s c.json -oy</code> (outputs YAML to stdout)</li></ul></li><li><p><code>-ot</code>:</p><ul><li><strong>Description</strong>: Output the final configuration in TOML format.</li><li><strong>Example</strong>: <code>konfigo -s c.json -ot</code> (outputs TOML to stdout)</li></ul></li><li><p><code>-oe</code>:</p><ul><li><strong>Description</strong>: Output the final configuration in ENV file format.</li><li><strong>Example</strong>: <code>konfigo -s c.json -oe</code> (outputs ENV to stdout)</li></ul></li></ul><h3 id="behavior-logging" tabindex="-1">Behavior &amp; Logging <a class="header-anchor" href="#behavior-logging" aria-label="Permalink to &quot;Behavior &amp; Logging&quot;">​</a></h3><p>These flags adjust Konfigo&#39;s operational behavior and the verbosity of its logging.</p><ul><li><p><code>-c</code>:</p><ul><li><strong>Description</strong>: Use case-sensitive key matching during merging.</li><li>By default, Konfigo performs case-insensitive key matching (e.g., <code>key</code> and <code>Key</code> would be treated as the same key, with the latter overriding the former if it appears later in the merge sequence).</li><li><strong>Example</strong>: <code>konfigo -s c.json -c</code></li></ul></li><li><p><code>-v</code>:</p><ul><li><strong>Description</strong>: Enable verbose debug logging. This provides detailed information about the steps Konfigo is taking, which can be helpful for troubleshooting.</li><li>This flag is overridden by <code>-q</code>.</li><li><strong>Example</strong>: <code>konfigo -s c.json -v</code></li></ul></li><li><p><code>-q</code>:</p><ul><li><strong>Description</strong>: Suppress all logging output except for the final configuration data (if outputting to stdout) or critical errors.</li><li>This flag overrides <code>-v</code>.</li><li><strong>Example</strong>: <code>konfigo -s c.json -q</code></li></ul></li><li><p><code>-h</code>:</p><ul><li><strong>Description</strong>: Show the help message, which includes a summary of all available flags and basic usage instructions.</li><li><strong>Example</strong>: <code>konfigo -h</code></li></ul></li></ul><h2 id="exit-codes" tabindex="-1">Exit Codes <a class="header-anchor" href="#exit-codes" aria-label="Permalink to &quot;Exit Codes&quot;">​</a></h2><ul><li><strong>0</strong>: Successful execution.</li><li><strong>Non-zero</strong>: An error occurred. Error messages are typically printed to stderr.</li></ul><p>For more details on how Konfigo uses environment variables, see the <a href="./environment-variables.html">Environment Variables</a> page. For a deep dive into schema capabilities, refer to the <a href="./../schema/">Schema documentation</a>.</p>`,24)]))}const f=i(a,[["render",n]]);export{p as __pageData,f as default};
