import{_ as a,c as e,o as i,ae as t}from"./chunks/framework.Bw7rlmih.js";const u=JSON.parse('{"title":"Schema: Advanced Features","description":"","frontmatter":{},"headers":[],"relativePath":"schema/advanced.md","filePath":"schema/advanced.md"}'),n={name:"schema/advanced.md"};function l(o,s,p,c,h,d){return i(),e("div",null,s[0]||(s[0]=[t(`<h1 id="schema-advanced-features" tabindex="-1">Schema: Advanced Features <a class="header-anchor" href="#schema-advanced-features" aria-label="Permalink to &quot;Schema: Advanced Features&quot;">​</a></h1><p>This page covers advanced schema features for fine-grained control over your configuration.</p><h2 id="immutable-fields" tabindex="-1">Immutable Fields <a class="header-anchor" href="#immutable-fields" aria-label="Permalink to &quot;Immutable Fields&quot;">​</a></h2><p>The <code>immutable</code> block lets you define a list of keys that, once set by an early-loading source, cannot be overwritten by a later source. This is useful for protecting critical, foundational values.</p><p><strong><code>schema.yml</code></strong></p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">immutable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;service.name&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;database.port&quot;</span></span></code></pre></div><p><strong>Scenario:</strong></p><ol><li><code>01-base.json</code> sets <code>database.port</code> to <code>5432</code>.</li><li><code>02-prod.yml</code> attempts to set <code>database.port</code> to <code>9999</code>.</li></ol><p>Because <code>database.port</code> is immutable, the overwrite from <code>02-prod.yml</code> will be ignored, and the final value will remain <code>5432</code>.</p><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>This rule is very strict and applies to all sources, including <code>KONFIGO_KEY_</code> environment variables.</p></div><h2 id="output-schema-filtering" tabindex="-1">Output Schema Filtering <a class="header-anchor" href="#output-schema-filtering" aria-label="Permalink to &quot;Output Schema Filtering&quot;">​</a></h2><p>The <code>outputSchema</code> block allows you to define a &quot;mask&quot; or &quot;template&quot; for your final output. Konfigo will produce a final configuration that <strong>only</strong> contains the keys present in your output schema file, discarding everything else.</p><p>This is useful for creating a clean, public-facing configuration from a larger, internal one that may contain secrets or intermediate values.</p><p><strong><code>schema.yml</code></strong></p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">outputSchema</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./public-config-shape.json&quot;</span></span></code></pre></div><p><strong><code>public-config-shape.json</code></strong></p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;service&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;features&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;new_ui&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>The final output from Konfigo will only contain the <code>service</code> and <code>features</code> blocks.</p>`,18)]))}const k=a(n,[["render",l]]);export{u as __pageData,k as default};
