import{_ as i,c as e,o as a,ae as t}from"./chunks/framework.Bw7rlmih.js";const k=JSON.parse('{"title":"Schema: Data Generation","description":"","frontmatter":{},"headers":[],"relativePath":"schema/generation.md","filePath":"schema/generation.md"}'),n={name:"schema/generation.md"};function l(o,s,h,r,p,c){return a(),e("div",null,s[0]||(s[0]=[t(`<h1 id="schema-data-generation" tabindex="-1">Schema: Data Generation <a class="header-anchor" href="#schema-data-generation" aria-label="Permalink to &quot;Schema: Data Generation&quot;">​</a></h1><p>Konfigo&#39;s schema allows you to define <code>generators</code> that create new data within your configuration. This is useful for constructing values based on existing configuration or variables.</p><p>Generators are defined as a list under the <code>generators</code> key in your schema file. Each generator must specify a <code>type</code> and the necessary parameters for that type.</p><h2 id="concat-generator" tabindex="-1"><code>concat</code> Generator <a class="header-anchor" href="#concat-generator" aria-label="Permalink to &quot;\`concat\` Generator&quot;">​</a></h2><p>The <code>concat</code> generator is currently the primary generator type. It constructs a new string value by concatenating other string values, which can be sourced from existing configuration paths or resolved variables.</p><h3 id="structure" tabindex="-1">Structure: <a class="header-anchor" href="#structure" aria-label="Permalink to &quot;Structure:&quot;">​</a></h3><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">generators</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;concat&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    targetPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;path.to.new.key&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Dot-separated path where the generated string will be placed.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Value1: {placeholder1}, Value2: {placeholder2}, Var: \${MY_VARIABLE}&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # String template.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    sources</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Map of placeholders in &#39;format&#39; to their source paths in the config.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      placeholder1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;path.to.source.value1&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      placeholder2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;another.config.value&quot;</span></span></code></pre></div><h3 id="fields" tabindex="-1">Fields: <a class="header-anchor" href="#fields" aria-label="Permalink to &quot;Fields:&quot;">​</a></h3><ul><li><code>type</code> (Required, string): Must be <code>&quot;concat&quot;</code>.</li><li><code>targetPath</code> (Required, string): A dot-separated path specifying where the newly generated string value should be inserted into the configuration. If the path doesn&#39;t exist, it will be created. If it exists, its value will be overwritten.</li><li><code>format</code> (Required, string): A template string that defines the structure of the generated output. <ul><li>It can contain literal text.</li><li>It can contain placeholders in the format <code>{placeholder_name}</code>. These placeholders will be replaced by values from the <code>sources</code> map.</li><li>It can also contain standard Konfigo variables like <code>\${MY_VARIABLE}</code>, which will be resolved <em>after</em> the <code>sources</code> placeholders are processed.</li></ul></li><li><code>sources</code> (Required, map): A map where: <ul><li>Keys are the <code>placeholder_name</code> strings used in the <code>format</code> string (without the curly braces).</li><li>Values are dot-separated paths to existing values within the <em>current state of the configuration</em> (after merges, but typically before most other schema processing for the current generator pass).</li></ul></li></ul><h3 id="how-it-works" tabindex="-1">How it Works: <a class="header-anchor" href="#how-it-works" aria-label="Permalink to &quot;How it Works:&quot;">​</a></h3><ol><li>For each <code>placeholder</code> defined in <code>sources</code>: a. Konfigo retrieves the value from the configuration at the specified <code>path</code>. b. If a source path is not found, Konfigo will return an error.</li><li>The <code>format</code> string is processed: a. Each <code>{placeholder_name}</code> is replaced with the corresponding value retrieved from <code>sources</code>.</li><li>The resulting string (after <code>sources</code> substitution) is then processed for standard Konfigo variable substitution (e.g., <code>\${MY_VARIABLE}</code>).</li><li>The final, fully resolved string is set at the <code>targetPath</code> in the configuration.</li></ol><h3 id="example" tabindex="-1">Example: <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example:&quot;">​</a></h3><p><strong>Schema (<code>schema.yml</code>):</strong></p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">vars</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;APP_VERSION&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.2.3&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Assume this is the state of the config before this generator runs</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  service</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;data-processor&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    instanceId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;instance-007&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  region</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;us-west-2&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">generators</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;concat&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    targetPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;service.identifier&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Service: {name} (ID: {id}) running in {region_val} - Version: \${APP_VERSION}&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    sources</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;service.name&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;service.instanceId&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      region_val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;region&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;concat&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    targetPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;service.url&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://\${FQDN_VAR}&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Using only a global variable</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    sources</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># No local sources needed if format string only uses global vars</span></span></code></pre></div><p><strong>Variables (e.g., from <code>-V vars.yml</code> or environment):</strong></p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># vars.yml</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">FQDN_VAR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myapp.example.com&quot;</span></span></code></pre></div><p><strong>Processing Steps:</strong></p><ol><li><p><strong>First Generator (<code>service.identifier</code>):</strong></p><ul><li><code>sources</code>: <ul><li><code>name</code> -&gt; <code>service.name</code> -&gt; &quot;data-processor&quot;</li><li><code>id</code> -&gt; <code>service.instanceId</code> -&gt; &quot;instance-007&quot;</li><li><code>region_val</code> -&gt; <code>region</code> -&gt; &quot;us-west-2&quot;</li></ul></li><li><code>format</code> after <code>sources</code> substitution: <code>&quot;Service: data-processor (ID: instance-007) running in us-west-2 - Version: \${APP_VERSION}&quot;</code></li><li><code>format</code> after <code>\${APP_VERSION}</code> substitution: <code>&quot;Service: data-processor (ID: instance-007) running in us-west-2 - Version: 1.2.3&quot;</code></li><li><code>config.service.identifier</code> becomes <code>&quot;Service: data-processor (ID: instance-007) running in us-west-2 - Version: 1.2.3&quot;</code></li></ul></li><li><p><strong>Second Generator (<code>service.url</code>):</strong></p><ul><li><code>sources</code>: (empty)</li><li><code>format</code> after <code>sources</code> substitution (no change): <code>&quot;https://\${FQDN_VAR}&quot;</code></li><li><code>format</code> after <code>\${FQDN_VAR}</code> substitution: <code>&quot;https://myapp.example.com&quot;</code></li><li><code>config.service.url</code> becomes <code>&quot;https://myapp.example.com&quot;</code></li></ul></li></ol><p><strong>Resulting Configuration (snippet):</strong></p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">service</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;data-processor&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  instanceId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;instance-007&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  identifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Service: data-processor (ID: instance-007) running in us-west-2 - Version: 1.2.3&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://myapp.example.com&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">region</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;us-west-2&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ... other config ...</span></span></code></pre></div><p>Generators are applied in the order they are defined in the <code>generators</code> list. The output of one generator can potentially be used as a source for a subsequent generator if its <code>targetPath</code> is referenced in the later generator&#39;s <code>sources</code>.</p>`,21)]))}const g=i(n,[["render",l]]);export{k as __pageData,g as default};
