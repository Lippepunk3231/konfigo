import{_ as i,c as a,o as t,ae as e}from"./chunks/framework.Bw7rlmih.js";const c=JSON.parse('{"title":"Schema: Data Transformation","description":"","frontmatter":{},"headers":[],"relativePath":"schema/transformation.md","filePath":"schema/transformation.md"}'),n={name:"schema/transformation.md"};function l(h,s,p,o,k,r){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="schema-data-transformation" tabindex="-1">Schema: Data Transformation <a class="header-anchor" href="#schema-data-transformation" aria-label="Permalink to &quot;Schema: Data Transformation&quot;">​</a></h1><p>Konfigo&#39;s <code>transform</code> directives allow you to modify the structure and content of your merged configuration data. Transformations are applied after initial merging and variable resolution (for the transform directives themselves) but typically before final validation.</p><p>Transformations are defined as a list under the <code>transform</code> key in your schema file. Each transformation object in the list defines a specific operation.</p><h2 id="common-behavior" tabindex="-1">Common Behavior <a class="header-anchor" href="#common-behavior" aria-label="Permalink to &quot;Common Behavior&quot;">​</a></h2><ul><li><strong>Variable Substitution in Directives</strong>: Before a transformation is applied, Konfigo will perform variable substitution (e.g., <code>\${MY_VAR}</code>) on the string values within the transformation definition itself (like <code>path</code>, <code>from</code>, <code>to</code>, <code>prefix</code>, or <code>value</code> if it&#39;s a string).</li><li><strong>Order of Execution</strong>: Transformations are executed in the order they appear in the <code>transform</code> list. The output of one transformation becomes the input for the next.</li></ul><h2 id="transformation-types" tabindex="-1">Transformation Types <a class="header-anchor" href="#transformation-types" aria-label="Permalink to &quot;Transformation Types&quot;">​</a></h2><h3 id="_1-renamekey" tabindex="-1">1. <code>renameKey</code> <a class="header-anchor" href="#_1-renamekey" aria-label="Permalink to &quot;1. \`renameKey\`&quot;">​</a></h3><p>Changes the name of a key at a specified path, effectively moving its value to a new key and deleting the old one.</p><ul><li><strong>Structure</strong>:<div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;renameKey&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;old.path.to.key&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Dot-separated path of the key to rename.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;new.path.to.key&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Dot-separated new path for the key.</span></span></code></pre></div></li><li><strong>Fields</strong>: <ul><li><code>type</code> (Required): <code>&quot;renameKey&quot;</code></li><li><code>from</code> (Required, string): The current dot-separated path to the key you want to rename.</li><li><code>to</code> (Required, string): The new dot-separated path where the value should be moved.</li></ul></li><li><strong>Behavior</strong>: <ul><li>Retrieves the value from the <code>from</code> path.</li><li>If the <code>from</code> path is not found, an error occurs.</li><li>Sets the retrieved value at the <code>to</code> path (creating intermediate maps if necessary).</li><li>Deletes the key at the original <code>from</code> path.</li></ul></li><li><strong>Example</strong>:<div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Config before: { &quot;user&quot;: { &quot;name&quot;: &quot;Alice&quot;, &quot;id&quot;: 123 } }</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;renameKey&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user.name&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user.fullName&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Config after: { &quot;user&quot;: { &quot;fullName&quot;: &quot;Alice&quot;, &quot;id&quot;: 123 } }</span></span></code></pre></div></li></ul><h3 id="_2-changecase" tabindex="-1">2. <code>changeCase</code> <a class="header-anchor" href="#_2-changecase" aria-label="Permalink to &quot;2. \`changeCase\`&quot;">​</a></h3><p>Modifies the case of a string value at a specified path.</p><ul><li><strong>Structure</strong>:<div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;changeCase&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;path.to.string.value&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Dot-separated path to the string value.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;snake&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                # Target case: &quot;upper&quot;, &quot;lower&quot;, &quot;snake&quot;, &quot;camel&quot;.</span></span></code></pre></div></li><li><strong>Fields</strong>: <ul><li><code>type</code> (Required): <code>&quot;changeCase&quot;</code></li><li><code>path</code> (Required, string): The dot-separated path to the string value to be modified.</li><li><code>case</code> (Required, string): The target case format. Supported values: <ul><li><code>&quot;upper&quot;</code>: Converts to UPPERCASE.</li><li><code>&quot;lower&quot;</code>: Converts to lowercase.</li><li><code>&quot;snake&quot;</code>: Converts to snake_case.</li><li><code>&quot;camel&quot;</code>: Converts to camelCase (lower camel case).</li></ul></li></ul></li><li><strong>Behavior</strong>: <ul><li>Retrieves the value from <code>path</code>.</li><li>If the path is not found or the value is not a string, an error occurs.</li><li>Converts the string to the specified <code>case</code>.</li><li>Updates the value at <code>path</code> with the new cased string.</li></ul></li><li><strong>Example</strong>:<div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Config before: { &quot;apiSettings&quot;: { &quot;RequestTimeout&quot;: &quot;ThirtySeconds&quot; } }</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;changeCase&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;apiSettings.RequestTimeout&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;snake&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Config after: { &quot;apiSettings&quot;: { &quot;RequestTimeout&quot;: &quot;thirty_seconds&quot; } }</span></span></code></pre></div></li></ul><h3 id="_3-addkeyprefix" tabindex="-1">3. <code>addKeyPrefix</code> <a class="header-anchor" href="#_3-addkeyprefix" aria-label="Permalink to &quot;3. \`addKeyPrefix\`&quot;">​</a></h3><p>Adds a prefix to all keys within a map located at a specified path.</p><ul><li><strong>Structure</strong>:<div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;addKeyPrefix&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;path.to.map.object&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Dot-separated path to the map.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    prefix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my_prefix_&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       # String to prepend to each key in the map.</span></span></code></pre></div></li><li><strong>Fields</strong>: <ul><li><code>type</code> (Required): <code>&quot;addKeyPrefix&quot;</code></li><li><code>path</code> (Required, string): The dot-separated path to the map object whose keys will be prefixed.</li><li><code>prefix</code> (Required, string): The string to prepend to each key within the map at <code>path</code>.</li></ul></li><li><strong>Behavior</strong>: <ul><li>Retrieves the value from <code>path</code>.</li><li>If the path is not found or the value is not a map, an error occurs.</li><li>Creates a new map where each key from the original map is prepended with <code>prefix</code>.</li><li>Updates the value at <code>path</code> with this new map.</li></ul></li><li><strong>Example</strong>:<div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Config before: { &quot;settings&quot;: { &quot;timeout&quot;: 30, &quot;retries&quot;: 3 } }</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;addKeyPrefix&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;settings&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    prefix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http_&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Config after: { &quot;settings&quot;: { &quot;http_timeout&quot;: 30, &quot;http_retries&quot;: 3 } }</span></span></code></pre></div></li></ul><h3 id="_4-setvalue" tabindex="-1">4. <code>setValue</code> <a class="header-anchor" href="#_4-setvalue" aria-label="Permalink to &quot;4. \`setValue\`&quot;">​</a></h3><p>Sets a specific value at a given path, potentially overwriting an existing value or creating the path if it doesn&#39;t exist. The value can be of any valid YAML/JSON type (string, number, boolean, list, map).</p><ul><li><strong>Structure</strong>:<div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;setValue&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;path.to.target.key&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Dot-separated path where the value will be set.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;New Static Value&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # The value to set. Can be any type.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                                # If a string, it undergoes variable substitution.</span></span></code></pre></div><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;setValue&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;feature.flags&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      newToggle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      betaFeature</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span></code></pre></div></li><li><strong>Fields</strong>: <ul><li><code>type</code> (Required): <code>&quot;setValue&quot;</code></li><li><code>path</code> (Required, string): The dot-separated path where the <code>value</code> will be set.</li><li><code>value</code> (Required, any): The value to set at the <code>path</code>. This can be a simple literal (string, number, boolean) or a complex nested structure (map, list). If <code>value</code> is a string, it will undergo <code>\${VAR_NAME}</code> substitution before being set.</li></ul></li><li><strong>Behavior</strong>: <ul><li>Sets the provided <code>value</code> at the specified <code>path</code>.</li><li>If the path or parts of it do not exist, they are created.</li><li>If a value already exists at <code>path</code>, it is overwritten.</li></ul></li><li><strong>Example (String Value with Variable Substitution)</strong>:<div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Schema vars:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># vars:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#   - name: &quot;ADMIN_EMAIL&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#     value: &quot;admin@example.com&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Config before: { }</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;setValue&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;contact.admin&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Email: \${ADMIN_EMAIL}&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Config after: { &quot;contact&quot;: { &quot;admin&quot;: &quot;Email: admin@example.com&quot; } }</span></span></code></pre></div></li><li><strong>Example (Complex Value)</strong>:<div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Config before: { &quot;app&quot;: { &quot;name&quot;: &quot;MyApp&quot; } }</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;setValue&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app.settings.notifications&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      enabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      channels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;email&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sms&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Config after:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#   &quot;app&quot;: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#     &quot;name&quot;: &quot;MyApp&quot;,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#     &quot;settings&quot;: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#       &quot;notifications&quot;: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#         &quot;enabled&quot;: true,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#         &quot;channels&quot;: [&quot;email&quot;, &quot;sms&quot;]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#       }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#     }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#   }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># }</span></span></code></pre></div></li></ul><h2 id="example-combining-transformations" tabindex="-1">Example Combining Transformations <a class="header-anchor" href="#example-combining-transformations" aria-label="Permalink to &quot;Example Combining Transformations&quot;">​</a></h2><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># schema.yml</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">vars</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ENV_PREFIX&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;prod&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;renameKey&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;legacy.api_endpoint&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;service.url&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;changeCase&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;service.url&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Assuming it&#39;s a string like &quot;HTTP://OLD-DOMAIN.COM&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lower&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;setValue&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;service.environment&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${ENV_PREFIX}&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;addKeyPrefix&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;service&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Assuming service map now exists</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    prefix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${ENV_PREFIX}_&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Initial config (merged from sources):</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#   &quot;legacy&quot;: { &quot;api_endpoint&quot;: &quot;HTTP://OLD-DOMAIN.COM/api&quot; },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#   &quot;other_setting&quot;: 123</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Expected final config (YAML):</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># other_setting: 123</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># prod_service:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#   environment: prod</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#   url: http://old-domain.com/api</span></span></code></pre></div><p>This sequence first renames <code>legacy.api_endpoint</code> to <code>service.url</code>. Then, it changes the case of the string at <code>service.url</code>. After that, it sets <code>service.environment</code> using a variable. Finally, it prefixes all keys within the <code>service</code> map (which now contains <code>url</code> and <code>environment</code>) with <code>prod_</code>.</p>`,21)]))}const u=i(n,[["render",l]]);export{c as __pageData,u as default};
