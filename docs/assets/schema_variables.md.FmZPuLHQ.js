import{_ as i,c as a,o as e,ae as n}from"./chunks/framework.Bw7rlmih.js";const c=JSON.parse('{"title":"Schema: Variables & Substitution","description":"","frontmatter":{},"headers":[],"relativePath":"schema/variables.md","filePath":"schema/variables.md"}'),t={name:"schema/variables.md"};function l(o,s,h,r,p,k){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="schema-variables-substitution" tabindex="-1">Schema: Variables &amp; Substitution <a class="header-anchor" href="#schema-variables-substitution" aria-label="Permalink to &quot;Schema: Variables &amp; Substitution&quot;">​</a></h1><p>Konfigo&#39;s variable system is a cornerstone of its processing capabilities, allowing you to create dynamic and reusable configurations. Variables can be defined in multiple locations and are resolved using a strict precedence order. They are substituted into your configuration data and even within other schema directives using the <code>\${VAR_NAME}</code> syntax.</p><h2 id="variable-definition-and-precedence" tabindex="-1">Variable Definition and Precedence <a class="header-anchor" href="#variable-definition-and-precedence" aria-label="Permalink to &quot;Variable Definition and Precedence&quot;">​</a></h2><p>Variables can be defined in three main places, listed here from highest to lowest precedence:</p><ol><li><p><strong>Environment Variables (<code>KONFIGO_VAR_...</code>) (Highest Priority)</strong></p><ul><li><strong>Syntax</strong>: <code>KONFIGO_VAR_VARNAME=value</code> (e.g., <code>export KONFIGO_VAR_API_KEY=secret123</code>)</li><li><strong>Description</strong>: Variables set in the environment using the <code>KONFIGO_VAR_</code> prefix. These override any other variable definitions.</li><li><strong>Use Case</strong>: Ideal for injecting secrets or highly dynamic, environment-specific values during runtime or in CI/CD pipelines.</li><li>See <a href="./../guide/environment-variables.html">Environment Variables</a> for more details.</li></ul></li><li><p><strong>Variables File (<code>-V</code> or <code>--vars-file</code>)</strong></p><ul><li><strong>Syntax</strong>: A separate YAML, JSON, or TOML file passed via the <code>-V</code> or <code>--vars-file</code> CLI flag.</li><li><strong>Description</strong>: This file can contain simple key-value pairs that define variables. It can also host the <a href="#batch-processing-with-konfigo_foreach"><code>konfigo_forEach</code></a> directive for batch processing.</li><li><strong>Use Case</strong>: Defining sets of variables for specific environments (e.g., <code>dev-vars.yml</code>, <code>prod-vars.yml</code>) or for controlling batch operations.</li><li><strong>Example (<code>example-vars.yml</code> provided via <code>-V my-configs/example-vars.yml</code>):</strong><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Simple key-value pairs</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">GREETING</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello from example-vars.yml&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">SERVICE_NAME</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my-awesome-app&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">REPLICA_COUNT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Nested structures are also possible, though direct variable</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># substitution typically uses simple key-value pairs from the resolved map.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">DATABASE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  HOST</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;db.example.com&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  PORT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5432</span></span></code></pre></div>In this example, <code>\${GREETING}</code>, <code>\${SERVICE_NAME}</code>, <code>\${REPLICA_COUNT}</code>, <code>\${DATABASE.HOST}</code>, and <code>\${DATABASE.PORT}</code> (if flattened or accessed via path) would be available. Konfigo typically flattens these for direct substitution, or you might refer to nested values if your schema logic supports it (e.g., <code>fromPath</code> in schema <code>vars</code>).</li></ul></li><li><p><strong>Schema <code>vars</code> Block (Lowest Priority)</strong></p><ul><li><strong>Syntax</strong>: The <code>vars:</code> block list within your main schema file (<code>-S</code>).</li><li><strong>Description</strong>: Defines the default set of variables, their sources (literal, from other environment variables, from other config paths), and fallback default values.</li><li><strong>Use Case</strong>: Establishing the baseline variable logic for your application.</li></ul></li></ol><h2 id="defining-variables-in-the-schema-vars-block" tabindex="-1">Defining Variables in the Schema (<code>vars:</code> block) <a class="header-anchor" href="#defining-variables-in-the-schema-vars-block" aria-label="Permalink to &quot;Defining Variables in the Schema (\`vars:\` block)&quot;">​</a></h2><p>The <code>vars</code> block in your schema file is a list of variable definitions. Each definition is an object that specifies the variable&#39;s <code>name</code> and how its value should be determined.</p><h3 id="common-fields-for-each-variable-definition" tabindex="-1">Common Fields for each Variable Definition: <a class="header-anchor" href="#common-fields-for-each-variable-definition" aria-label="Permalink to &quot;Common Fields for each Variable Definition:&quot;">​</a></h3><ul><li><code>name</code> (Required, string): The name of the variable (e.g., <code>API_URL</code>). This is the name you&#39;ll use for substitution, like <code>\${API_URL}</code>.</li></ul><h3 id="value-sources-choose-one-per-definition" tabindex="-1">Value Sources (choose one per definition): <a class="header-anchor" href="#value-sources-choose-one-per-definition" aria-label="Permalink to &quot;Value Sources (choose one per definition):&quot;">​</a></h3><ul><li><p><code>value</code> (string):</p><ul><li><strong>Description</strong>: Defines a literal, static string value for the variable.</li><li><strong>Example</strong>:<div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">vars</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;DEFAULT_REGION&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;us-east-1&quot;</span></span></code></pre></div></li></ul></li><li><p><code>fromEnv</code> (string):</p><ul><li><strong>Description</strong>: Sources the variable&#39;s value from a system environment variable (different from <code>KONFIGO_VAR_...</code>). This allows you to map existing system environment variables to Konfigo variables.</li><li><strong>Example</strong>:<div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">vars</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;DOCKER_TAG&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    fromEnv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;CI_COMMIT_SHA&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Reads the value of the CI_COMMIT_SHA system env var</span></span></code></pre></div></li></ul></li><li><p><code>fromPath</code> (string):</p><ul><li><strong>Description</strong>: Sources the variable&#39;s value from another key within the <em>merged configuration data</em> (i.e., after all <code>-s</code> sources are merged, but before most schema processing like generators or transforms). The path is dot-separated.</li><li><strong>Example</strong>:<div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Assuming merged config has: deployment: { namespace: &quot;production&quot; }</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">vars</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;PRIMARY_NAMESPACE&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    fromPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;deployment.namespace&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Value will be &quot;production&quot;</span></span></code></pre></div></li></ul></li></ul><h3 id="optional-fallback" tabindex="-1">Optional Fallback: <a class="header-anchor" href="#optional-fallback" aria-label="Permalink to &quot;Optional Fallback:&quot;">​</a></h3><ul><li><code>defaultValue</code> (string): <ul><li><strong>Description</strong>: Provides a fallback value if a variable defined using <code>fromEnv</code> or <code>fromPath</code> cannot be resolved (e.g., the environment variable is not set, or the path does not exist in the configuration).</li><li>This is <strong>not</strong> used if <code>value</code> is specified.</li><li><strong>Example</strong>:<div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">vars</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;RELEASE_VERSION&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    fromEnv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;CI_COMMIT_TAG&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    defaultValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;latest&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # If CI_COMMIT_TAG is not set, RELEASE_VERSION becomes &quot;latest&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;OPTIONAL_SETTING&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    fromPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user.preferences.theme&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    defaultValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dark&quot;</span></span></code></pre></div></li></ul></li></ul><h3 id="resolution-logic-within-schema-vars" tabindex="-1">Resolution Logic within Schema <code>vars</code>: <a class="header-anchor" href="#resolution-logic-within-schema-vars" aria-label="Permalink to &quot;Resolution Logic within Schema \`vars\`:&quot;">​</a></h3><p>For each variable defined in the schema&#39;s <code>vars</code> block:</p><ol><li>If <code>value</code> is present, that&#39;s the variable&#39;s value.</li><li>Else, if <code>fromEnv</code> is present, Konfigo attempts to read that system environment variable.</li><li>Else, if <code>fromPath</code> is present, Konfigo attempts to read that path from the merged configuration.</li><li>If the chosen source (<code>fromEnv</code> or <code>fromPath</code>) yields a value, that&#39;s used.</li><li>If not, and <code>defaultValue</code> is present, that&#39;s used.</li><li>If the source doesn&#39;t yield a value and no <code>defaultValue</code> is provided, Konfigo will error, as the variable cannot be resolved.</li></ol><p>This resolved value from the schema <code>vars</code> block is then subject to being overridden by the <code>-V</code> file or <code>KONFIGO_VAR_...</code> environment variables as per the overall precedence rules.</p><h2 id="variable-substitution" tabindex="-1">Variable Substitution <a class="header-anchor" href="#variable-substitution" aria-label="Permalink to &quot;Variable Substitution&quot;">​</a></h2><p>Once all variables are resolved, Konfigo performs substitution wherever <code>\${VAR_NAME}</code> placeholders appear. This includes:</p><ul><li>Values within your configuration data.</li><li>Certain fields within schema directives themselves (e.g., paths in <code>generators</code>, <code>transform</code>, <code>validate</code>, or even values in <code>setValue</code> transforms).</li></ul><p><strong>Example of Substitution in Config:</strong></p><p><code>config.yml</code>:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${API_HOST}:\${API_PORT}/v1&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  timeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${DEFAULT_TIMEOUT}&quot;</span></span></code></pre></div><p>If <code>API_HOST=api.example.com</code>, <code>API_PORT=8443</code>, and <code>DEFAULT_TIMEOUT=30s</code> are resolved, the processed config will have:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;api.example.com:8443/v1&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  timeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;30s&quot;</span></span></code></pre></div><h2 id="batch-processing-with-konfigo-foreach" tabindex="-1">Batch Processing with <code>konfigo_forEach</code> <a class="header-anchor" href="#batch-processing-with-konfigo-foreach" aria-label="Permalink to &quot;Batch Processing with \`konfigo_forEach\`&quot;">​</a></h2><p>Konfigo supports generating multiple output files from a single schema by iterating over sets of variables. This is a powerful feature for managing configurations across different environments, services, or any scenario requiring multiple variations of a base template.</p><p>This feature is activated by defining a <code>konfigo_forEach</code> block in the variables file specified with the <code>-V</code> or <code>--vars-file</code> flag.</p><h3 id="konfigo-foreach-structure" tabindex="-1"><code>konfigo_forEach</code> Structure <a class="header-anchor" href="#konfigo-foreach-structure" aria-label="Permalink to &quot;\`konfigo_forEach\` Structure&quot;">​</a></h3><p>The <code>konfigo_forEach</code> block has the following structure within your <code>-V</code> variables file:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># In your main variables file (e.g., -V loop-vars.yml)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Optional: Global variables accessible to all iterations unless overridden by iteration-specific vars.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># These follow the standard variable precedence (KONFIGO_VAR_ &gt; -V file global &gt; schema vars).</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">GLOBAL_API_KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;default_global_key&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">DEPLOYMENT_TIER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;general&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">konfigo_forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Specify the source of iteration data (choose ONE):</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  items</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Option 1: Define variable sets directly as a list of maps.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">SERVICE_NAME</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;frontend&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      REPLICAS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      PORT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      DEPLOYMENT_TIER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;web&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Overrides DEPLOYMENT_TIER for this item</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">SERVICE_NAME</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;backend-api&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      REPLICAS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      PORT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8080</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # DEPLOYMENT_TIER will be &quot;general&quot; (from global) for this item</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # itemFiles: # Option 2: List of external variable files (YAML, JSON, or TOML).</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  #   # Paths are relative to the main variables file if not absolute.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  #   - &quot;service-configs/frontend-vars.yml&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  #   - &quot;service-configs/backend-vars.json&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  output</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Defines how output files are named and formatted for each iteration.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Placeholders:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    #   - \`\${VAR_NAME}\`: Any variable from the current iteration&#39;s scope (iteration-specific, global, or schema-resolved).</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    #   - \`\${ITEM_INDEX}\`: The 0-based index of the current iteration.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    #   - \`\${ITEM_FILE_BASENAME}\`: If using \`itemFiles\`, the basename of the current variable file (e.g., &quot;frontend-vars&quot; from &quot;frontend-vars.yml&quot;).</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    #                             This is an empty string if using \`items\`.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    filenamePattern</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dist/\${SERVICE_NAME}/config-\${ITEM_INDEX}.json&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Example: dist/frontend/config-0.json</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Optional: Overrides the global output format (from -oX flags or filename extension from -of) for generated files.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Valid formats: &quot;json&quot;, &quot;yaml&quot;, &quot;toml&quot;, &quot;env&quot;.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # If not set, format is inferred from filenamePattern&#39;s extension, or defaults to YAML if ambiguous.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # format: &quot;yaml&quot;</span></span></code></pre></div><h3 id="key-aspects-of-konfigo-foreach" tabindex="-1">Key aspects of <code>konfigo_forEach</code>: <a class="header-anchor" href="#key-aspects-of-konfigo-foreach" aria-label="Permalink to &quot;Key aspects of \`konfigo_forEach\`:&quot;">​</a></h3><ul><li><strong>Location</strong>: Must be in the variables file supplied via <code>-V</code>.</li><li><strong>Iteration Data</strong>: <ul><li><code>items</code>: A list of maps, where each map represents a set of variables for one iteration.</li><li><code>itemFiles</code>: A list of paths to other variable files. Each file provides variables for one iteration. Paths are relative to the main <code>-V</code> file&#39;s directory if not absolute.</li><li>You must use <em>either</em> <code>items</code> <em>or</em> <code>itemFiles</code>, not both.</li></ul></li><li><strong>Global Variables</strong>: Variables defined in the <code>-V</code> file <em>outside</em> the <code>konfigo_forEach</code> block are considered global. They are available to each iteration unless an iteration-specific variable (from <code>items</code> or an <code>itemFile</code>) has the same name.</li><li><strong>Output Configuration (<code>output</code>)</strong>: <ul><li><code>filenamePattern</code> (Required): A template for generating output filenames. It can use <code>\${VAR_NAME}</code>, <code>\${ITEM_INDEX}</code>, and <code>\${ITEM_FILE_BASENAME}</code> placeholders. <ul><li><code>\${VAR_NAME}</code> resolution for filename patterns prioritizes: <ol><li>Iteration-specific variables (from <code>items</code> or <code>itemFile</code>).</li><li><code>KONFIGO_VAR_...</code> environment variables.</li><li>Simple <code>value</code> or <code>defaultValue</code> from the schema&#39;s <code>vars</code> block (does not resolve <code>fromEnv</code> or <code>fromPath</code> for filenames).</li></ol></li></ul></li><li><code>format</code> (Optional): Explicitly sets the output format for all generated files in the loop, overriding format inference from <code>filenamePattern</code>&#39;s extension or global output flags.</li></ul></li></ul><h3 id="variable-precedence-in-konfigo-foreach-mode" tabindex="-1">Variable Precedence in <code>konfigo_forEach</code> Mode <a class="header-anchor" href="#variable-precedence-in-konfigo-foreach-mode" aria-label="Permalink to &quot;Variable Precedence in \`konfigo_forEach\` Mode&quot;">​</a></h3><p>For each generated file during a <code>konfigo_forEach</code> loop, the variable resolution order is:</p><ol><li><strong><code>KONFIGO_VAR_...</code> Environment Variables (Highest Priority)</strong></li><li><strong>Current Iteration Variables</strong>: <ul><li>If using <code>items</code>: Variables from the current item in the list.</li><li>If using <code>itemFiles</code>: Variables loaded from the current item file.</li></ul></li><li><strong>Global Variables from <code>-V</code> file</strong>: Variables defined in the main <code>-V</code> file <em>outside</em> the <code>konfigo_forEach</code> block.</li><li><strong>Schema <code>vars</code> Block (Lowest Priority)</strong>: Variables defined in the <code>vars:</code> section of your main schema file (<code>-S</code>).</li></ol><h3 id="how-it-works" tabindex="-1">How It Works <a class="header-anchor" href="#how-it-works" aria-label="Permalink to &quot;How It Works&quot;">​</a></h3><ol><li>Konfigo loads the main schema (<code>-S</code>) and the primary variables file (<code>-V</code>).</li><li>It detects the <code>konfigo_forEach</code> block within the <code>-V</code> file.</li><li>It determines the iteration data (either <code>items</code> or <code>itemFiles</code>).</li><li>For each iteration (each item in <code>items</code> or each file in <code>itemFiles</code>): a. A deep copy of the base merged configuration (from <code>-s</code> sources) is created. b. A unique set of variables is prepared for this iteration according to the precedence rules above. This includes <code>\${ITEM_INDEX}</code> and <code>\${ITEM_FILE_BASENAME}</code>. c. The output filename is generated using <code>output.filenamePattern</code> and the current iteration&#39;s variables. d. The main schema (<code>-S</code>) is processed against the copied configuration using this iteration&#39;s specific variable set. This includes all standard Konfigo steps: <code>vars</code> resolution (within the schema, if any are still relevant), <code>generators</code>, <code>transform</code>, variable substitution in config values, and <code>validate</code>. e. The output directory for the generated file is created if it doesn&#39;t exist. f. The resulting configuration is marshalled to the specified (or inferred) <code>output.format</code> and written to the generated filename.</li><li>Once all iterations are complete, Konfigo exits. Normal output flags (<code>-of</code>, <code>-oj</code>, etc.) are ignored when <code>konfigo_forEach</code> is active, as output is fully controlled by the directive.</li></ol><h3 id="example-usage-of-konfigo-foreach" tabindex="-1">Example Usage of <code>konfigo_forEach</code> <a class="header-anchor" href="#example-usage-of-konfigo-foreach" aria-label="Permalink to &quot;Example Usage of \`konfigo_forEach\`&quot;">​</a></h3><p><strong>Schema (<code>schema.yml</code>):</strong></p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># schema.yml</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">vars</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;DEFAULT_TIMEOUT&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;30s&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;LOG_LEVEL&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    defaultValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;info&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  serviceName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${SERVICE_NAME}&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # From iteration</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  instanceCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${REPLICAS}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # From iteration</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  apiPort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${PORT}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              # From iteration</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  networkZone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${ZONE}&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # From iteration or global</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  timeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${DEFAULT_TIMEOUT}&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # From schema vars</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  logLevel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${LOG_LEVEL}&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # From schema vars, potentially overridden</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  globalSetting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${GLOBAL_CONFIG_VAL}&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # From -V file global</span></span></code></pre></div><p><strong>Variables File (<code>loop-controller.yml</code> passed with <code>-V loop-controller.yml</code>):</strong></p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># loop-controller.yml</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">GLOBAL_CONFIG_VAL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;shared-across-all&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ZONE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;default-zone&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Global, can be overridden by items</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">konfigo_forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  items</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">SERVICE_NAME</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user-service&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      REPLICAS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      PORT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8001</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      LOG_LEVEL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;debug&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Overrides schema default for this item</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">SERVICE_NAME</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;order-service&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      REPLICAS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      PORT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8002</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      ZONE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;high-traffic-zone&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Overrides global ZONE for this item</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  output</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    filenamePattern</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;generated-configs/\${ZONE}/\${SERVICE_NAME}/app-config.v\${ITEM_INDEX}.yml&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # format: &quot;yaml&quot; # Optional, can be inferred from .yml in pattern</span></span></code></pre></div><p><strong>Command:</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">konfigo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> base-template.json</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -S</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> schema.yml</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -V</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> loop-controller.yml</span></span></code></pre></div><p>(Assuming <code>base-template.json</code> is an empty JSON <code>{}</code> or contains foundational structure that doesn&#39;t conflict with schema-generated keys.)</p><p><strong>Expected Output Files:</strong></p><ul><li><code>generated-configs/default-zone/user-service/app-config.v0.yml</code>:<div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">serviceName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">user-service</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">instanceCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">apiPort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8001</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">networkZone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">default-zone</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">timeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">30s</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">logLevel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">debug</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">globalSetting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">shared-across-all</span></span></code></pre></div></li><li><code>generated-configs/high-traffic-zone/order-service/app-config.v1.yml</code>:<div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">serviceName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">order-service</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">instanceCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">apiPort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8002</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">networkZone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">high-traffic-zone</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">timeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">30s</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">logLevel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">info</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Falls back to schema default as not set in item</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">globalSetting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">shared-across-all</span></span></code></pre></div></li></ul><p>This powerful combination of layered variable resolution and batch processing makes Konfigo highly adaptable for complex configuration scenarios.</p>`,49)]))}const E=i(t,[["render",l]]);export{c as __pageData,E as default};
