import{_ as o,c as i,o as a,ae as t}from"./chunks/framework.Bw7rlmih.js";const g=JSON.parse('{"title":"Konfigo User Guide","description":"","frontmatter":{},"headers":[],"relativePath":"guide/index.md","filePath":"guide/index.md"}'),r={name:"guide/index.md"};function n(s,e,l,c,d,u){return a(),i("div",null,e[0]||(e[0]=[t('<h1 id="konfigo-user-guide" tabindex="-1">Konfigo User Guide <a class="header-anchor" href="#konfigo-user-guide" aria-label="Permalink to &quot;Konfigo User Guide&quot;">​</a></h1><p>Welcome to the Konfigo User Guide! This guide provides detailed information on how to use Konfigo, from basic command-line operations to advanced schema-driven configuration processing.</p><h2 id="table-of-contents" tabindex="-1">Table of Contents <a class="header-anchor" href="#table-of-contents" aria-label="Permalink to &quot;Table of Contents&quot;">​</a></h2><ul><li><p><strong><a href="./cli-reference.html">CLI Reference</a></strong></p><ul><li>A comprehensive reference for all command-line flags and options available in Konfigo. Learn how to specify input sources, control output formats, enable schema processing, and manage logging.</li></ul></li><li><p><strong><a href="./environment-variables.html">Environment Variables</a></strong></p><ul><li>Understand how Konfigo utilizes environment variables for both direct configuration overrides (<code>KONFIGO_KEY_...</code>) and for supplying dynamic values for variable substitution (<code>KONFIGO_VAR_...</code>).</li></ul></li><li><p><strong><a href="./use-cases.html">Use Cases</a></strong> (To be expanded)</p><ul><li>Explore practical examples and scenarios where Konfigo can simplify and enhance your configuration management workflows. <ul><li>Managing configurations for different environments (dev, staging, prod).</li><li>Generating multiple similar configuration files (e.g., for microservices).</li><li>Validating configuration against a strict contract.</li><li>Transforming legacy configuration structures to a new format.</li></ul></li></ul></li></ul><h2 id="core-workflow" tabindex="-1">Core Workflow <a class="header-anchor" href="#core-workflow" aria-label="Permalink to &quot;Core Workflow&quot;">​</a></h2><p>The typical workflow with Konfigo involves these steps:</p><ol><li><p><strong>Prepare Configuration Sources</strong>:</p><ul><li>Your configurations can be spread across multiple files (JSON, YAML, TOML, .env) and directories.</li><li>You might also have values set via <code>KONFIGO_KEY_...</code> environment variables.</li></ul></li><li><p><strong>Define a Schema (Optional but Recommended for Advanced Use)</strong>:</p><ul><li>Create a schema file (YAML, JSON, or TOML) that specifies how Konfigo should process your data. This includes: <ul><li><a href="./../schema/variables.html">Variable definitions and substitution rules</a></li><li><a href="./../schema/generation.html">Data generation rules</a></li><li><a href="./../schema/transformation.html">Data transformation rules</a></li><li><a href="./../schema/validation.html">Data validation rules</a></li><li>Optionally, <code>inputSchema</code> for pre-validation and <code>outputSchema</code> for post-filtering.</li><li>Optionally, <code>immutable</code> paths to protect certain keys.</li></ul></li></ul></li><li><p><strong>Run Konfigo</strong>:</p><ul><li>Use the <code>konfigo</code> command with appropriate flags: <ul><li><code>-s</code> to specify your source files/directories.</li><li><code>-S</code> to apply your schema.</li><li><code>-V</code> to provide a variables file (which can also trigger <code>konfigo_forEach</code> batch mode).</li><li><code>-of</code> or <code>-o&lt;format&gt;</code> to control the output.</li><li>Other flags to control behavior like recursion (<code>-r</code>), case-sensitivity (<code>-c</code>), etc.</li></ul></li></ul></li><li><p><strong>Processing Steps (Simplified View)</strong>: a. <strong>Load Sources</strong>: Konfigo reads and parses all specified source files. b. <strong>Merge Configurations</strong>: The parsed data is merged into a single configuration map. <code>KONFIGO_KEY_...</code> environment variables are applied as overrides at this stage. Immutable paths are respected. c. <strong>(If Schema Provided)</strong>: i. <strong>Input Schema Validation</strong>: If <code>inputSchema</code> is defined, the merged config is validated against it. ii. <strong>Variable Resolution</strong>: Variables are resolved based on precedence (<code>KONFIGO_VAR_...</code> &gt; <code>-V</code> file &gt; schema <code>vars</code>). iii. <strong>Generators</strong>: Data generation rules are applied. iv. <strong>Transformers</strong>: Data transformation rules are applied. v. <strong>Global Variable Substitution</strong>: <code>${VAR_NAME}</code> placeholders are substituted throughout the configuration. vi. <strong>Validation</strong>: The processed configuration is validated against the <code>validate</code> rules in the schema. vii. <strong>Output Schema Filtering</strong>: If <code>outputSchema</code> is defined, the configuration is filtered. d. <strong>(If Batch Mode with <code>konfigo_forEach</code> in <code>-V</code> file and Schema Provided)</strong>: * Steps c.ii through c.vii are performed for <em>each iteration</em> defined in <code>konfigo_forEach</code>, using a deep copy of the merged configuration from step 4.b and iteration-specific variables. Each iteration produces its own output file. e. <strong>Output</strong>: The final configuration (or multiple configurations in batch mode) is written to the specified output file(s) or to stdout in the chosen format.</p></li></ol><p>This guide, along with the <a href="./../schema/">Schema Documentation</a>, aims to provide you with all the information needed to master Konfigo.</p>',8)]))}const h=o(r,[["render",n]]);export{g as __pageData,h as default};
